//비동기 방식 (asynchronus)

//*(Asterisk)
/**
 * 현재 실행 중인 작업이 아직 끝나지 않은 상태라고 해도 다음 작업이 실행 되는 방식
 */

 function firstwork() {
    console.log('첫번째 작업 수행');
}

function secondwork() {
    console.log('두번째 작업 수행');
}


//비동기 처리를 수행해주는 몇가지 함수를 활용
//타이머 함수 (timer), setTimeout()의 특징 중 하나는 블로킹(작업중단)을 하지않고
//비동기적으로 처리함.

setTimeout(firstwork, 3*1000); //지정한 3*1000 이후에 콜백함수 firstwork() 호출
secondwork();

/**
 * 비동기 처리 방식은 현재 실행중인 작업이 종료되지 않은 상태라고해도
 * 다음 작업을 곧바로 수행하기때문에 블로킹이 발생하지않음
 * 
 * 장점: 블로킹 발생안함
 * 단점: 작업의 실행 순서가 보장되지 않음
 * 
 * 비동기처리방식으로 동작하는 함수:
 * setTimeout(), setInterval(), HTTP 요청, 이벤트핸들러(EventHandler)
 * 
 */
